image: alpine

stages:
  - build
  - deploy
  - release

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .gradle

before_script:
  - mkdir -p ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

variables:
  GRADLE_OPTS: '-Dorg.gradle.caching=true -Dorg.gradle.daemon=false'
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

# Git 상태 확인 작업
#check-for-new-commits:
#  stage: check
#  script:
#    - echo "최근 커밋 확인 중..."
#    # 마지막 커밋이 새로운 푸시인지 확인
#    - LAST_COMMIT=$(git rev-parse HEAD)
#    - LAST_PUSH_COMMIT=$(git log --since='1 day ago' --format="%H" -n 1)
#    # LAST_PUSH_COMMIT이 비어 있는 경우 처리
#    - echo "$LAST_PUSH_COMMIT"
#    - if [ -z "$LAST_PUSH_COMMIT" ]; then echo "지난 1일 내에 새로운 푸시가 없습니다. 파이프라인 종료"; exit 0; fi
#    - echo "새로운 푸시가 발견되었습니다. 파이프라인 계속 진행.."
#  resource_group: "pipeline"
#  allow_failure: false



build:
  stage: build
  image: gradle:jdk17
  script:
    - echo "빌드 실행 중..."
    - ./gradlew build -x test
  artifacts:
    expire_in: 1 day
    paths:
      - build/libs/parata-micro-front-0.0.1-SNAPSHOT.jar
  resource_group: "pipeline"
  except:
    - tags  # 태그 푸시 시에는 실행하지 않음
  only:
    - main


# 배포 작업
deploy-dev:
  stage: deploy
  before_script:
    #    - apt-get update -y
    #    - apt-get install -y sshpass
    - apk update  # Alpine 패키지 목록 업데이트
    - apk add --no-cache sshpass openssh  # sshpass 및 ssh 패키지 설치
  script:
    - echo "[$PROD_SERVER_IP_01] 애플리케이션 배포 중..."
    - sshpass -p "$PROD_SERVER_PASSWORD_01" scp -o StrictHostKeyChecking=no -o ProxyCommand="sshpass -p '$W2R_SERVER_PASSWORD' ssh -o StrictHostKeyChecking=no -W %h:%p root@$W2R_SERVER_IP" build/libs/parata-micro-front-0.0.1-SNAPSHOT.jar root@$PROD_SERVER_IP_01:/var/www/
    - sshpass -p "$PROD_SERVER_PASSWORD_01" ssh -o StrictHostKeyChecking=no -o ProxyCommand="sshpass -p '$W2R_SERVER_PASSWORD' ssh -o StrictHostKeyChecking=no -W %h:%p root@$W2R_SERVER_IP" root@$PROD_SERVER_IP_01 "sh /var/www/startup.sh"
  environment:
    name: dev
    url: http://brand.parataair.com
  dependencies:
    - build  # 빌드와 테스트가 완료된 후에만 배포 실행
  only:
    - main




#variables:
#  GIT_DEPTH: "0"  # 모든 커밋 내역을 가져오도록 설정
#
## Git 상태 확인 작업
#check-for-new-commits:
#  stage: check
#  script:
#    - echo "최근 커밋 확인 중..."
#    # 마지막 커밋이 새로운 푸시인지 확인
#    - LAST_COMMIT=$(git rev-parse HEAD)
#    - LAST_PUSH_COMMIT=$(git log --since='1 day ago' --format="%H" -n 1)
#    # LAST_PUSH_COMMIT이 비어 있는 경우 처리
#    - echo "$LAST_PUSH_COMMIT"
#    - if [ -z "$LAST_PUSH_COMMIT" ]; then echo "지난 1일 내에 새로운 푸시가 없습니다. 파이프라인 종료"; exit 0; fi
#    - echo "새로운 푸시가 발견되었습니다. 파이프라인 계속 진행.."
#  resource_group: "pipeline-dev"
#  allow_failure: false

